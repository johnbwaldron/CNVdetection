geneRanges <- 
    function(db, column="ENTREZID")
{
    g <- genes(db, columns=column)
    col <- mcols(g)[[column]]
    genes <- granges(g)[rep(seq_along(g), elementLengths(col))]
    mcols(genes)[[column]] <- as.character(unlist(col))
    genes
}

splitColumnByOverlap <-
    function(query, subject, column="ENTREZID", ...)
{
    olaps <- findOverlaps(query, subject, ...)
    f1 <- factor(subjectHits(olaps),
                 levels=seq_len(subjectLength(olaps)))
    splitAsList(mcols(query)[[column]][queryHits(olaps)], f1)
}

library(GenomicRanges)

# for a the bed file:
  #cnv = rtracklayer::import("my.bed")

#from the xcnvs data.frames:
df = read.delim("my.tsv")
cnv = makeGRangesFromDataFrame(df)

library(Homo.sapiens)

gns = geneRanges(Homo.sapiens, column="SYMBOL")

#Find which genes overlap which copy number regions

  symInCnv = splitByOverlap(gns, cnv, "SYMBOL")
  symInCnv
  
  #as.vector(symInCnv)
  
  #or
  
  #unstrsplit(symInCnv, sep=", ") 
  
  
  geneRanges <- 
    function(db, column="ENTREZID")
'db' is a so-called OrganismDb, containing information about genes (e.g., ENTREZ or SYMBOL gene ids) as well as gene models (e.g., TXSTART, TXEND). The Homo.sapiens OrangismDb is based on the org.Hs.eg.db gene annotation package, and the TxDb.Hsapiens.UCSC.hg19.knownGene package; it is relatively easy to make a custom package if you have different annotations.

'column' is the type of gene identifier you are interested in mapping to. See columns(Homo.sapiens) for some ideas.

{
    g <- genes(db, columns=column)
This line extracts the coordinates (min and max) of each gene, as well as the column (e.g., SYMBOL associated with that gene.

The TxDb is organized around a primary key (the ENTREZID), and there may be several gene SYMBOLS per ENTREZID. The next few lines makes each SYMBOL map to a single genomic location.

    col <- mcols(g)[[column]]
    genes <- granges(g)[rep(seq_along(g), elementLengths(col))]
    mcols(genes)[[column]] <- as.character(unlist(col))
    genes
}
The end result is a GRanges instance, with a metadata column corresponding to the type of gene identifier of interest.

The basic idea behind splitByOverlap is that we can find which gene coordinates overlap which copy number variant coordinates, and then split the column of gene identifiers into lists corresponding to the regions of overlap

splitByOverlap <-
    function(x, f, column="ENTREZID", ...)
'query' is the gene coordinates, 'subject' the copy number coordinates. 'column' needs to match 'column' in the geneRanges() function.

{
    olaps <- findOverlaps(query, subject, ...)
findOverlaps() is a very powerful function. It returns a 'Hits' object that has two parallel vectors. The vectors can be extracted with queryHits() and subjectHits(). queryHits() are the indexes of the queries (the gene coordinates) that overlap the corresponding subjectHits(), i.e., the indexes of the subjects, the copy number regions. 

The next lines line up the query column identifier (e.g., gene SYMBOL) that overlaps each subject.

    f1 <- factor(subjectHits(olaps), levels=seq_len(subjectLength(olaps)))
    splitAsList(mcols(x)[[column]][queryHits(olaps)], f1)
the use of factor() with exactly as many levels as there are subjects ensures that the splitAsList() command returns a 1:1 mapping between the subjects (copy number regions) and the genes in the corresponding CharacterList.
